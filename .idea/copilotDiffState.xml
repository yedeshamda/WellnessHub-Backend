<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/wellnesshubbackend/wellnesshubbackend/controller/AuthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/wellnesshubbackend/wellnesshubbackend/controller/AuthController.java" />
              <option name="originalContent" value="package org.wellnesshubbackend.wellnesshubbackend.controller;&#10;&#10;&#10;import org.wellnesshubbackend.wellnesshubbackend.dto.AuthRequest;&#10;import org.wellnesshubbackend.wellnesshubbackend.dto.AuthResponse;&#10;import org.wellnesshubbackend.wellnesshubbackend.dto.RegisterRequest;&#10;import org.wellnesshubbackend.wellnesshubbackend.service.AuthService;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/auth&quot;)&#10;@RequiredArgsConstructor&#10;public class AuthController {&#10;&#10;    private final AuthService authService;&#10;&#10;    @PostMapping(&quot;/register&quot;)&#10;    public ResponseEntity&lt;AuthResponse&gt; register(@Valid @RequestBody RegisterRequest request) {&#10;        return ResponseEntity.ok(authService.register(request));&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;AuthResponse&gt; login(@Valid @RequestBody AuthRequest request) {&#10;        return ResponseEntity.ok(authService.authenticate(request));&#10;    }&#10;&#10;    @PostMapping(&quot;/logout&quot;)&#10;    public ResponseEntity&lt;?&gt; logout(@RequestHeader(&quot;Authorization&quot;) String token) {&#10;        authService.logout(token);&#10;        return ResponseEntity.ok().body(&quot;Déconnexion réussie&quot;);&#10;    }&#10;&#10;    @PostMapping(&quot;/refresh-token&quot;)&#10;    public ResponseEntity&lt;AuthResponse&gt; refreshToken(@RequestHeader(&quot;Authorization&quot;) String refreshToken) {&#10;        String token = refreshToken.substring(7);&#10;        return ResponseEntity.ok(authService.refreshToken(token));&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.wellnesshubbackend.wellnesshubbackend.controller;&#10;&#10;&#10;import org.wellnesshubbackend.wellnesshubbackend.dto.AuthRequest;&#10;import org.wellnesshubbackend.wellnesshubbackend.dto.AuthResponse;&#10;import org.wellnesshubbackend.wellnesshubbackend.dto.RegisterRequest;&#10;import org.wellnesshubbackend.wellnesshubbackend.service.AuthService;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/auth&quot;)&#10;@RequiredArgsConstructor&#10;public class AuthController {&#10;&#10;    private final AuthService authService;&#10;&#10;    @PostMapping(&quot;/register&quot;)&#10;    public ResponseEntity&lt;AuthResponse&gt; register(@Valid @RequestBody RegisterRequest request) {&#10;        return ResponseEntity.ok(authService.register(request));&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;AuthResponse&gt; login(@Valid @RequestBody AuthRequest request) {&#10;        return ResponseEntity.ok(authService.authenticate(request));&#10;    }&#10;&#10;    @PostMapping(&quot;/logout&quot;)&#10;    public ResponseEntity&lt;?&gt; logout(@RequestHeader(&quot;Authorization&quot;) String token) {&#10;        authService.logout(token);&#10;        return ResponseEntity.ok().body(&quot;Déconnexion réussie&quot;);&#10;    }&#10;&#10;    @PostMapping(&quot;/refresh-token&quot;)&#10;    public ResponseEntity&lt;AuthResponse&gt; refreshToken(@RequestHeader(&quot;Authorization&quot;) String refreshToken) {&#10;        String token = refreshToken.substring(7);&#10;        return ResponseEntity.ok(authService.refreshToken(token));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>